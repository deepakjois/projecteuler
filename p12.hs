-- The sequence of triangle numbers is generated by adding the natural numbers.
-- So the 7th triangle number would be 1 + 2 + 3 + 4 + 5 + 6 + 7 = 28. The first
-- ten terms would be:
-- 
-- 1, 3, 6, 10, 15, 21, 28, 36, 45, 55, ...
-- 
-- Let us list the factors of the first seven triangle numbers:
-- 
--  1: 1
--  3: 1,3
--  6: 1,2,3,6
-- 10: 1,2,5,10
-- 15: 1,3,5,15
-- 21: 1,3,7,21
-- 28: 1,2,4,7,14,28
-- 
-- We can see that 28 is the first triangle number to have over five divisors.
-- 
-- What is the value of the first triangle number to have over five hundred
-- divisors?

import Data.List

primeFactors n = primeFactors' n 2 where
    primeFactors' n factor
      | factor*factor > n   = [n]
      | n `mod` factor == 0 = factor : primeFactors' (n `div` factor) factor
      | otherwise           = primeFactors' n (factor + 1)



numDivisors n = product $ map ((+1).length) (group (primeFactors n))

main = do
  let t = dropWhile (\x -> (numDivisors x) < 500) (scanl1 (+) [1..])
  print (head t)
  
  
-- faster solution (found on forum)
nr_of_div = 0 : 1 : [((2*) $ length $ filter ((== 0).(mod n)) [1..(truncate $ sqrt $ fromIntegral n)]) - ((\i -> if (truncate $ sqrt $ fromIntegral i)^2 == i then 1 else 0) n)| n <- [2..]]
first_over l n | ((mod n 2) == 0) = if (nr_of_div !! (div n 2))*(nr_of_div !! (n+1)) > l then div (n*(n+1)) 2 else first_over l (n+1)
               | otherwise        = if (nr_of_div !! n)*(nr_of_div !! (div (n+1) 2)) > l then div (n*(n+1)) 2 else first_over l (n+1)
result = do (putStrLn . show) (first_over 500 1)